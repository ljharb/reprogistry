name: "cache results for a package"
on:
  repository_dispatch:
    types: [version-results]
  workflow_dispatch:
    inputs:
      package:
        description: valid package name to cache results for
        type: string
        required: true
      versions:
        description: a non-strict subset of valid versions of that package
        type: string
        required: true

permissions:
  contents: read

jobs:
  cache:
    permissions:
      contents: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: data

      - uses: ljharb/actions/node/install@main
        with:
          node-version: "node"

      - name: validate package name
        run: npx validate-npm-package-name-cli "${PACKAGE}"
        env:
          PACKAGE: ${{ github.event.client_payload.package || inputs.package }}

      - run: mkdir -p "results/${PACKAGE}"
        env:
          PACKAGE: ${{ github.event.client_payload.package || inputs.package }}

      - uses: actions/github-script@v7
        env:
          PACKAGE: ${{ github.event.client_payload.package || inputs.package }}
          VERSIONS: ${{ github.event.client_payload.versions || inputs.versions }}
        with:
          script: |
            const { readFile, writeFile } = require('fs/promises');
            const path = require('path');

            const { reproduce } = require('reproduce');
            const semverCompare = require('semver/functions/compare');
            const Range = require('semver/classes/range');

            const pkg = process.env.PACKAGE;

            const pkgDir = path.join(process.cwd(), 'results', pkg);

            const versions = new Range(process.env.VERSIONS);

            const [
              results,
              existingData,
            ] = await Promise.all([
              reproduce(`${pkg}@${versions}`),
              Promise.all(versions.map(async (v) => [
                  v,
                  JSON.parse(await readFile(path.join(pkgDir, v), 'utf8').catch(() => '[]'))
              ]).then(Object.fromEntries)),
            ]);

            await Promise.all(results.map(async (result) => {
                const dataPath = path.join(pkgDir, result.version);
                const existing = existingData[result.version];

                existing.push(result);
                existing.sort((a, b) => {
                    const dA = new Date(a.timestamp);
                    const dB = new Date(b.timestamp);
                    if (+dA !== +dB) {
                        return dA - dB;
                    }
                    const vv = semverCompare(a.version, b.version);
                    if (vv !== 0) {
                        return vv;
                    }

                    return semverCompare(a.reproduceVersion, b.reproduceVersion);
                });

                await writeFile(dataPath, JSON.stringify(existing, null, '\t'));
            }));

      - run: git diff && git status

      - name: commit changes
        uses: elstudio/actions-js-build/commit@v4
        with:
          commitMessage: "`${{ github.event.client_payload.package || inputs.package }}`: update results"