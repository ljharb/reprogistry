name: "filter package versions"
on:
  workflow_call:
    inputs:
      package:
        description: valid npm package name to filter versions for
        required: true
        type: string
  workflow_dispatch:
    inputs:
      package:
        description: valid npm package name to filter versions for
        required: true
        type: string

permissions:
  contents: read

jobs:
  filter:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4
        with:
          persist-credentials: true
          ref: data

      - uses: ljharb/actions/node/install@main
        with:
          node-version: "node"

      - name: validate package name
        run: npx validate-npm-package-name-cli "${PACKAGE}"
        env:
          PACKAGE: ${{ inputs.package }}

      - uses: actions/github-script@v7
        id: versions
        env:
          PACKAGE: ${{ inputs.package }}
        with:
          result-encoding: string
          script: |
            const { readFile } = require('fs/promises');
            const path = require('path');

            const { version: reproduceVersion } = require('reproduce/package.json');
            const { packument } = require('pacote');

            const pkg = process.env.PACKAGE;

            const pkgDir = path.join(process.cwd(), 'results', pkg);

            const versions = await packument(`${pkg}@*`).then(({ versions }) => Object.keys(versions));

            const existingData = Object.fromEntries(
                await Promise.all(versions.map(async (v) => [
                    v,
                    JSON.parse(await readFile(path.join(pkgDir, v), 'utf8').catch(() => '[]'))
                ])),
            );
            const missingRepros = versions.filter((v) => {
                if (!(v in existingData) || !(existingData[v]?.length > 0)) {
                  return true;
                }
                if (!existingData[v].some((r) => r.reproduceVersion === reproduceVersion)) {
                  return true;
                }
                return false;
            });

            return missingRepros.join('|');

      - run: |
          curl --fail-with-body \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${GH_TOKEN}" \
            --request POST \
            --data "{ \"event_type\": \"version-results\", \"client_payload\": { \"package\": \"${PACKAGE}\", \"versions\": \"${VERSIONS}\" } }" \
            https://api.github.com/repos/ljharb/reprogistry/dispatches
        env:
          PACKAGE: ${{ inputs.package }}
          VERSIONS: ${{ steps.versions.outputs.result }}
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
